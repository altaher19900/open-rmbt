buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'war'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

project.webAppDirName = 'WebContent'

repositories {
    mavenCentral()
    maven{url 'https://maven.restlet.talend.com'}
    maven{url 'https://oss.sonatype.org/content/repositories/snapshots/'}
}

sourceSets {
    main {
        java { srcDir 'src' }
        resources { srcDir 'src' }
    }
}

subprojects{
    evaluationDependsOn(':RMBTSharedCode')
    evaluationDependsOn(':RMBTUtil')
}

dependencies {
    providedCompile "org.apache.tomcat:tomcat-catalina:$catalinaVersion"
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: "$servletVersion"
    implementation "org.json:json:$jsonVersion"
    implementation "org.restlet.jse:org.restlet.ext.json:$restletVersion"
    implementation "org.restlet.jee:org.restlet.ext.servlet:$restletVersion"
    implementation group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"
    implementation group: 'com.google.guava', name: 'guava', version: "$guavaVersion"
    implementation group: 'net.spy', name: 'spymemcached', version: '2.12.1'
    implementation 'org.postgis:postgis-jdbc:1.3.3'
    implementation(group: 'net.bull.javamelody', name: 'javamelody-core', version: "$javaMelodyVersion")
    implementation project(':RMBTSharedCode')
    implementation project(':RMBTUtil')
}


war {
    exclude 'WEB-INF/lib/**'
    exclude 'WEB-INF/classes/**'
    exclude 'META-INF/context.xml'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(buildDir){ 
            into('META-INF') 
            include 'context.xml' 
    }
}


def revisionPropertiesFile = file("${buildDir}/resources/main/revision.properties")
processResources {
    doLast {
        String revisionProperties = "git.describe=" + getVersionNameFromGit() + "\n"
        revisionProperties = revisionProperties + "git.branch=" + getBranchFromGit() + "\n"
        revisionProperties = revisionProperties + "git.dirty=" + getDirtyFromGit() + "\n"
        revisionProperties = revisionProperties + "git.id=" + getHashFromGit() + "\n"
        revisionProperties = revisionProperties + "git.revision=" + getVersionCodeFromGit() + "\n"
        revisionPropertiesFile.write(revisionProperties, 'UTF-8')
    }
}
