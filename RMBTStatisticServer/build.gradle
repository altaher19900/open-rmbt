buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.benjaminsproule.swagger" version "1.0.13"
}

apply plugin: 'com.benjaminsproule.swagger'
apply plugin: 'war'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

project.webAppDirName = 'WebContent'

repositories {
    mavenCentral()
    maven{url 'https://maven.restlet.talend.com'}
    maven{url 'https://oss.sonatype.org/content/repositories/snapshots/'}
    maven { url 'https://jitpack.io' }
}

sourceSets {
    main {
        java { srcDirs = ['src'] }
        resources { srcDirs = [
                'src',
                '../private/RMBTStatisticServer/src'
        ]}
    }
    test {
        java {
            srcDir 'test/java'
        }
        resources {
            srcDir 'test/resources'
        }
    }
}

subprojects{
    evaluationDependsOn(':RMBTSharedCode')
    evaluationDependsOn(':RMBTUtil')
}

def webXmlFile = file(project.webAppDirName + "/WEB-INF/web.xml")
def generatedContextXmlFile = file("${buildDir}/context.xml")

dependencies {
    providedCompile "org.apache.tomcat:tomcat-catalina:$catalinaVersion"
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: "$servletVersion"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.mockito:mockito-core:2.7.17'
    implementation "org.restlet.jse:org.restlet:$restletVersion"
    implementation "org.restlet.jse:org.restlet.ext.json:$restletVersion"
    implementation "org.restlet.jee:org.restlet.ext.servlet:$restletVersion"
    implementation "org.restlet.jee:org.restlet.ext.fileupload:$restletVersion"
    implementation "org.json:json:$jsonVersion"
    implementation 'commons-io:commons-io:2.4'
    implementation 'org.apache.jcs:jcs:1.3'
    implementation "io.swagger:swagger-annotations:1.5.24"
    //compile 'io.swagger:swagger-core:1.5.15'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    implementation "com.fasterxml.jackson:jackson-base:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$jacksonVersion"
    implementation group: 'de.grundid.opendatalab', name: 'geojson-jackson', version: '1.14'
    implementation group: 'commons-dbutils', name: 'commons-dbutils', version: "$dbUtilsVersion"
    implementation "com.github.sett4:jackson-dataformat-xlsx-lite:2.9.10.1"
    implementation (group: 'net.bull.javamelody', name: 'javamelody-core', version: "$javaMelodyVersion")
    implementation group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"
    implementation group: 'com.google.guava', name: 'guava', version: "$guavaVersion"
    implementation group: 'com.github.jknack', name: 'handlebars', version: '4.1.2'
    implementation group: 'joda-time', name: 'joda-time', version: '2.9.7'
    implementation group: 'net.spy', name: 'spymemcached', version: '2.12.1'
    implementation project(':RMBTSharedCode')
    implementation project(':RMBTUtil')
}


war {
    exclude 'WEB-INF/lib/**'
    exclude 'WEB-INF/classes/**'
    exclude 'META-INF/context.xml'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(buildDir){ 
            into('META-INF') 
            include 'context.xml' 
    }
}


swagger {
    apiSource {
        springmvc = false
        locations = ['at.rtr.rmbt.statisticServer','at.rtr.rmbt.statisticSerer.opendata.dto']
        schemes = ['https']
        host = 'data.netztest.at'
        basePath = '/RMBTStatisticServer'
        info {
            title = 'RTR NetTest OpenData'
            version = 'v1'
            description = 'Open Data API for RTR-Netztest\n ' +
                    'For further information, please consult <https://www.netztest.at/en/Opendata>\n ' +
                    'For high-volume requests, please contact RTR (netztest@rtr.at) for instructions regarding the parameter "sender". ' +
                    'Users with a registered sender ID can be informed in case of major interface changes.\n ' +
                    'Data accessible via the Open Data Interface are made available under Creative Commons Attribution 4.0 (CC BY 4.0). ' +
                    'Regarding privacy policy and terms of use, please refer to https://www.rtr.at/en/tk/netztestterms.'
            contact {
                email = 'netztest@rtr.at'
                name = 'RTR-Netztest-Team'
                url = 'https://www.netztest.at'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        swaggerDirectory = "${project.rootDir}/RMBTStatisticServer/doc/"
        outputFormats = ['json']
    }
}

def revisionPropertiesFile = file("${buildDir}/resources/main/revision.properties")
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    doLast {
        String revisionProperties = "git.describe=" + getVersionNameFromGit() + "\n"
        revisionProperties = revisionProperties + "git.branch=" + getBranchFromGit() + "\n"
        revisionProperties = revisionProperties + "git.dirty=" + getDirtyFromGit() + "\n"
        revisionProperties = revisionProperties + "git.id=" + getHashFromGit() + "\n"
        revisionProperties = revisionProperties + "git.revision=" + getVersionCodeFromGit() + "\n"
        revisionPropertiesFile.write(revisionProperties, 'UTF-8')
    }
}